DROP TABLE LoanAudit;

CREATE TABLE LoanAudit (
    LoanID        CHAR(10),
	ActionDate    TIMESTAMP,
    ActionType    VARCHAR(10),
	ActionDesc     VARCHAR(200),
    PerformedBy   VARCHAR(100)
);

CREATE OR REPLACE TRIGGER trg_audit_loan_actions
AFTER INSERT OR UPDATE OR DELETE ON Loan
FOR EACH ROW
DECLARE
	v_actionStr 	VARCHAR(200);
BEGIN
    IF INSERTING THEN
	
		v_actionStr := 'Member ID: ' || :NEW.MemberID || 
		' | Loan Date: ' || :NEW.LoanDate ||
		' | Due Date: ' || :NEW.DueDate;
		
        INSERT INTO LoanAudit (LoanID, ActionDate, ActionType, ActionDesc, PerformedBy) 
		VALUES (:NEW.LoanID, SYSTIMESTAMP, 'INSERT', v_actionStr, USER);

    ELSIF UPDATING THEN
		
		v_actionStr := '';
		
		IF :OLD.LoanID != :NEW.LoanID THEN
			v_actionStr := v_actionStr || 'Loan ID: ' || :OLD.LoanID || ' -> ' || :NEW.LoanID || ' | ';
		END IF;
		
		IF :OLD.MemberID != :NEW.MemberID THEN
			v_actionStr := v_actionStr || 'Member ID: ' || :OLD.MemberID || ' -> ' || :NEW.MemberID || ' | ';
		END IF;

		IF :OLD.LoanDate != :NEW.LoanDate THEN
			v_actionStr := v_actionStr || 'Loan Date: ' || TO_CHAR(:OLD.LoanDate, 'YYYY-MM-DD') ||
						   ' -> ' || TO_CHAR(:NEW.LoanDate, 'YYYY-MM-DD') || ' | ';
		END IF;

		IF :OLD.DueDate != :NEW.DueDate THEN
			v_actionStr := v_actionStr || 'Due Date: ' || TO_CHAR(:OLD.DueDate, 'YYYY-MM-DD') ||
						   ' -> ' || TO_CHAR(:NEW.DueDate, 'YYYY-MM-DD') || ' | ';
		END IF;
		
        INSERT INTO LoanAudit (LoanID, ActionDate, ActionType, ActionDesc, PerformedBy) 
		VALUES (:NEW.LoanID, SYSTIMESTAMP, 'UPDATE', v_actionStr, USER);

    ELSIF DELETING THEN
        
		v_actionStr := 'Member ID: ' || :OLD.MemberID || 
		' | Loan Date: ' || :OLD.LoanDate ||
		' | Due Date: ' || :OLD.DueDate;
		
        INSERT INTO LoanAudit (LoanID, ActionDate, ActionType, ActionDesc, PerformedBy) 
		VALUES (:OLD.LoanID, SYSTIMESTAMP, 'DELETE', v_actionStr, USER);
		
    END IF;
END;
/

-- insert
INSERT INTO Loan (LoanID, LoanDate, DueDate, MemberID)
VALUES ('LOA' || TO_CHAR(loan_seq.NEXTVAL, 'FM0000000'), SYSDATE, SYSDATE + 14, 'MEM0000012');

-- update
DECLARE
   v_loan_id Loan.LoanID%TYPE;
BEGIN
   v_loan_id := 'LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000');

   UPDATE Loan
   SET DueDate = '2025-5-20' WHERE LoanID = v_loan_id;
END;
/

DECLARE
   v_loan_id Loan.LoanID%TYPE;
BEGIN
   v_loan_id := 'LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000');

   UPDATE Loan
   SET MemberID = 'MEM0000050' WHERE LoanID = v_loan_id;
END;
/

-- delete
DECLARE
   v_loan_id Loan.LoanID%TYPE;
BEGIN
   v_loan_id := 'LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000');

   DELETE FROM Loan WHERE LoanID = v_loan_id;
END;
/

SELECT * FROM LoanAudit;

---------------------------------------------------------------------------------------

DROP TABLE LoanDetailAudit;

CREATE TABLE LoanDetailAudit (
    BookID         CHAR(10),
    LoanID         CHAR(10),
	ActionDate     TIMESTAMP,
    ActionType     VARCHAR(10),
	ActionDesc 	   VARCHAR(200),
    PerformedBy    VARCHAR(100)
);


CREATE OR REPLACE TRIGGER trg_borrowed_count
AFTER INSERT OR UPDATE OR DELETE ON LoanDetail
FOR EACH ROW
DECLARE
	v_actionStr 	VARCHAR(200);
BEGIN
	IF INSERTING THEN
		UPDATE Book
		SET BorrowedCount = NVL(BorrowedCount, 0) + 1
		WHERE BookID = :NEW.BookID;
		
		v_actionStr := 'Return Date: ' || :NEW.ReturnDate || 
		' | Extension Count: ' || :NEW.ExtensionCount || 
		' | Extended Due Date: ' || :NEW.ExtendedDueDate || 
		' | Status: ' || :NEW.Status;

		INSERT INTO LoanDetailAudit (BookID, LoanID, ActionDate, ActionType, ActionDesc, PerformedBy)
		VALUES (:NEW.BookID, :NEW.LoanID, SYSTIMESTAMP, 'INSERT', v_actionStr, USER);
		
		ELSIF UPDATING THEN
			v_actionStr := '';

			IF :OLD.BookID != :NEW.BookID THEN
				v_actionStr := v_actionStr || 'Book ID: ' || :OLD.BookID || ' -> ' || :NEW.BookID || ' | ';

				UPDATE Book
				SET BorrowedCount = NVL(BorrowedCount, 0) - 1,
					AvailableCopies = AvailableCopies + 1
				WHERE BookID = :OLD.BookID;

				UPDATE Book
				SET BorrowedCount = NVL(BorrowedCount, 0) + 1,
					AvailableCopies = AvailableCopies - 1
				WHERE BookID = :NEW.BookID;
			END IF;

			IF :OLD.LoanID != :NEW.LoanID THEN
				v_actionStr := v_actionStr || 'Loan ID: ' || :OLD.LoanID || ' -> ' || :NEW.LoanID || ' | ';
			END IF;
			
			IF (:OLD.ReturnDate IS NULL AND :NEW.ReturnDate IS NOT NULL) OR
			   :OLD.ReturnDate != :NEW.ReturnDate THEN
				v_actionStr := v_actionStr || 'Return Date: ' || 
							   NVL(TO_CHAR(:OLD.ReturnDate, 'YYYY-MM-DD'), 'NULL') ||
							   ' -> ' || NVL(TO_CHAR(:NEW.ReturnDate, 'YYYY-MM-DD'), 'NULL') || ' | ';
			END IF;

			IF :OLD.ExtensionCount != :NEW.ExtensionCount THEN
				v_actionStr := v_actionStr || 'Extension Count: ' || :OLD.ExtensionCount || ' -> ' || :NEW.ExtensionCount || ' | ';
			END IF;
			
			IF (:OLD.ExtendedDueDate IS NULL AND :NEW.ExtendedDueDate IS NOT NULL) OR
			   :OLD.ExtendedDueDate != :NEW.ExtendedDueDate THEN
				v_actionStr := v_actionStr || 'Extended Due Date: ' || 
							   NVL(TO_CHAR(:OLD.ExtendedDueDate, 'YYYY-MM-DD'), 'NULL') ||
							   ' -> ' || NVL(TO_CHAR(:NEW.ExtendedDueDate, 'YYYY-MM-DD'), 'NULL') || ' | ';
			END IF;

			IF :OLD.Status != :NEW.Status THEN
				v_actionStr := v_actionStr || 'Status: ' || :OLD.Status || ' -> ' || :NEW.Status || ' | ';
			END IF;
			
			IF (:OLD.FineID IS NULL AND :NEW.FineID IS NOT NULL) OR
			   :OLD.FineID != :NEW.FineID THEN
				v_actionStr := v_actionStr || 'Fine ID: ' || 
							   NVL(:OLD.FineID, 'NULL') ||
							   ' -> ' || NVL(:NEW.FineID, 'NULL') || ' | ';
			END IF;

			INSERT INTO LoanDetailAudit (BookID, LoanID, ActionDate, ActionType, ActionDesc, PerformedBy)
			VALUES (:NEW.BookID, :NEW.LoanID, SYSTIMESTAMP, 'UPDATE', v_actionStr, USER);
		
	ELSIF DELETING THEN
	
		UPDATE Book
		SET BorrowedCount = NVL(BorrowedCount, 0) - 1,
			AvailableCopies = AvailableCopies + 1
		WHERE BookID = :OLD.BookID;
		
		v_actionStr := 'Return Date: ' || :OLD.ReturnDate || 
		' | Extension Count: ' || :OLD.ExtensionCount || 
		' | Extended Due Date: ' || :OLD.ExtendedDueDate || 
		' | Status: ' || :OLD.Status;

		INSERT INTO LoanDetailAudit (BookID, LoanID, ActionDate, ActionType, ActionDesc, PerformedBy)
		VALUES (:OLD.BookID, :OLD.LoanID, SYSTIMESTAMP, 'DELETE', v_actionStr, USER);
	END IF;
END;
/

-- insert
INSERT INTO Loan (LoanID, LoanDate, DueDate, MemberID)
VALUES ('LOA' || TO_CHAR(loan_seq.NEXTVAL, 'FM0000000'), SYSDATE, SYSDATE + 14, 'MEM0000012');

INSERT INTO LoanDetail VALUES ('LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000'), 'BOK0000009', NULL, 0, NULL, 'BORROWED', NULL);
INSERT INTO LoanDetail VALUES ('LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000'), 'BOK0000008', NULL, 0, NULL, 'BORROWED', NULL);
INSERT INTO LoanDetail VALUES ('LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000'), 'BOK0000007', NULL, 0, NULL, 'BORROWED', NULL);

-- update
DECLARE
   v_loan_id Loan.LoanID%TYPE;
   v_book_id Book.BookID%TYPE;
   v_fine_id Fine.FineID%TYPE;
BEGIN
   v_loan_id := 'LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000');
   v_book_id := 'BOK0000009';
   
   INSERT INTO Fine VALUES ('FIN' || TO_CHAR(fine_seq.NEXTVAL, 'FM0000000'), 10, 'UNPAID', SYSDATE, '', NULL);
   v_fine_id := 'FIN' || TO_CHAR(fine_seq.CURRVAL, 'FM0000000');

   UPDATE LoanDetail
   SET ReturnDate = SYSDATE,
   Status = 'RETURNED',
   FineID = v_fine_id
   WHERE LoanID = v_loan_id AND BookID = v_book_id;
END;
/

-- delete
DECLARE
   v_loan_id Loan.LoanID%TYPE;
   v_book_id Book.BookID%TYPE;
BEGIN
   v_loan_id := 'LOA' || TO_CHAR(loan_seq.CURRVAL, 'FM0000000');
   v_book_id := 'BOK0000008';

   DELETE FROM LoanDetail
   WHERE LoanID = v_loan_id AND BookID = v_book_id;
END;
/

SELECT * FROM LoanDetailAudit;