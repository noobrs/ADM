-- Procedure 1

CREATE OR REPLACE PROCEDURE prc_loan_reserved_books (v_reservation_id IN CHAR) IS
    v_member_id     Member.MemberID%TYPE;
    v_book_id       Book.BookID%TYPE;
    v_book_title    Book.Title%TYPE;
    v_newLoanId     Loan.LoanID%TYPE;
    v_newLoanDate   DATE;
    v_newDueDate    DATE;
    v_resStatus    	ReservationDetail.Status%TYPE;

    CURSOR resBookCursor IS
        SELECT rd.BookID, b.Title
        FROM ReservationDetail rd
        JOIN Book b ON rd.BookID = b.BookID
        WHERE rd.ReservationID = v_reservation_id;

BEGIN
    SELECT MemberID INTO v_member_id
    FROM Reservation
    WHERE ReservationID = v_reservation_id;

    v_newLoanId := 'LOA' || TO_CHAR(loan_seq.NEXTVAL, 'FM0000000');
    v_newLoanDate := SYSDATE;
    v_newDueDate := SYSDATE + 14;

    INSERT INTO Loan (LoanID, LoanDate, DueDate, MemberID)
    VALUES (v_newLoanId, v_newLoanDate, v_newDueDate, v_member_id);

    OPEN resBookCursor;
    LOOP
        FETCH resBookCursor INTO v_book_id, v_book_title;
        EXIT WHEN resBookCursor%NOTFOUND;

		SELECT Status INTO v_resStatus
		FROM ReservationDetail
		WHERE ReservationID = v_reservation_id AND BookID = v_book_id;

		IF v_resStatus = 'NOT AVAILABLE' THEN
			ROLLBACK;
			RAISE_APPLICATION_ERROR(-20000, 'Book: ' || v_book_id || ' from Reservation: ' || v_reservation_id || ' is not available!');
		END IF;

        INSERT INTO LoanDetail (LoanID, BookID, Status)
        VALUES (v_newLoanId, v_book_id, 'BORROWED');
    END LOOP;
    CLOSE resBookCursor;

    UPDATE Reservation
    SET ReservationStatus = 'COMPLETED'
    WHERE ReservationID = v_reservation_id;

    COMMIT;
	
	DBMS_OUTPUT.PUT_LINE('');
	DBMS_OUTPUT.PUT_LINE('Loan created successfully from reservation!');
	DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('========================================');
	DBMS_OUTPUT.PUT_LINE('              LOAN DETAILS               ');
	DBMS_OUTPUT.PUT_LINE('========================================');
	DBMS_OUTPUT.PUT_LINE(RPAD('Loan ID', 15) || ': ' || v_newLoanId);
	DBMS_OUTPUT.PUT_LINE(RPAD('Member ID', 15) || ': ' || v_member_id);
	DBMS_OUTPUT.PUT_LINE(RPAD('Loan Date', 15) || ': ' || TO_CHAR(v_newLoanDate, 'DD-MON-YYYY'));
	DBMS_OUTPUT.PUT_LINE(RPAD('Due Date', 15) || ': ' || TO_CHAR(v_newDueDate, 'DD-MON-YYYY'));
	DBMS_OUTPUT.PUT_LINE('----------------------------------------');
	DBMS_OUTPUT.PUT_LINE(' Book(s) Borrowed:');
	DBMS_OUTPUT.PUT_LINE('----------------------------------------');

    OPEN resBookCursor;
    LOOP
        FETCH resBookCursor INTO v_book_id, v_book_title;
        EXIT WHEN resBookCursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('  - ' || v_book_id || ' | ' || v_book_title);
    END LOOP;
    CLOSE resBookCursor;

    DBMS_OUTPUT.PUT_LINE('========================================');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Reservation ID not found: ' || v_reservation_id);
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/


SELECT * FROM ReservationDetail ORDER BY ReservationID DESC;

INSERT INTO Reservation VALUES ('RES0000101', SYSDATE, 'PENDING', NULL, NULL, 'MEM0000001');
INSERT INTO ReservationDetail VALUES ('RES0000101', 'BOK0000005', SYSDATE, 'AVAILABLE');
INSERT INTO ReservationDetail VALUES ('RES0000101', 'BOK0000002', SYSDATE, 'NOT AVAILABLE');
INSERT INTO ReservationDetail VALUES ('RES0000101', 'BOK0000004', SYSDATE, 'NOT AVAILABLE');
COMMIT;

EXEC prc_loan_reserved_books ('RES0000101');




-- Procedure 2

CREATE OR REPLACE PROCEDURE prc_extend_loan (v_loan_id IN CHAR, v_book_id IN CHAR) IS
    v_current_due_date DATE;
    v_extension_count  NUMBER;
BEGIN
    SELECT ExtensionCount, NVL(ExtendedDueDate, (SELECT DueDate FROM Loan WHERE LoanID = v_loan_id))
    INTO v_extension_count, v_current_due_date
    FROM LoanDetail
    WHERE LoanID = v_loan_id AND BookID = v_book_id;

    IF v_extension_count < 3 THEN
        UPDATE LoanDetail
        SET 
            ExtendedDueDate = v_current_due_date + 7,
            ExtensionCount = v_extension_count + 1
        WHERE LoanID = v_loan_id AND BookID = v_book_id;

        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Loan extended successfully. New due date: ' || (v_current_due_date + 7));
    ELSE
        DBMS_OUTPUT.PUT_LINE('Extension limit reached for this book.');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Loan detail not found for the specified Loan ID and Book ID.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/

-- 1. Valid extension (ExtensionCount < 3)
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Test Case 1: Valid Extension ---');
    prc_extend_loan('LOA0000101', 'BOK0000002');
END;
/

-- 2. Extension limit reached (manually ensure ExtensionCount = 3 for this book before running)
BEGIN
UPDATE LoanDetail
SET ExtensionCount = 3
WHERE LoanID = 'LOA0000101' AND BookID = 'BOK0000002';

    DBMS_OUTPUT.PUT_LINE('--- Test Case 2: Extension Limit Reached ---');
    prc_extend_loan('LOA0000101', 'BOK0000002');
END;
/

-- 3. Loan detail not found (Invalid Loan ID or Book ID)
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Test Case 3: Loan Detail Not Found ---');
    prc_extend_loan('LOA9999999', 'LOA9999999');
END;
/

-- 4. (Optional) Unexpected error â€” Example: NULL as Loan ID (forces error if your table constraints disallow it)
BEGIN
    DBMS_OUTPUT.PUT_LINE('--- Test Case 4: Unexpected Error (NULL input) ---');
    prc_extend_loan(NULL, 'BOK0000003');
END;
/




-- Trigger 1
SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER trg_update_membership
AFTER INSERT ON MemberRenewal
FOR EACH ROW
DECLARE
    v_newDuration        MemberRenewal.Duration%TYPE;
    v_memberId           Member.MemberID%TYPE;
    v_oldStartDate       Member.StartDate%TYPE;
    v_oldEndDate         Member.EndDate%TYPE;
BEGIN
    IF (:NEW.InvoiceID IS NOT NULL) THEN
        SELECT Duration, MemberID INTO v_newDuration, v_memberId
        FROM MemberRenewal;
        
        SELECT StartDate, EndDate INTO v_oldStartDate, v_oldEndDate
        FROM Member
        WHERE MemberID = v_memberId;
        
        IF (v_oldEndDate > SYSDATE) THEN
            UPDATE Member
            SET
                StartDate = SYSDATE,
                 EndDate = ADD_MONTHS(v_oldEndDate, v_newDuration * 12)
            WHERE MemberID = v_memberId;
        ELSE
            UPDATE Member
            SET
                StartDate = SYSDATE,
                EndDate = ADD_MONTHS(SYSDATE, v_newDuration * 12)
            WHERE MemberID = v_memberId;
        END IF;
    END IF;
END;
/


-- Trigger 2
SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER trg_check_member_validity
BEFORE INSERT ON Loan
FOR EACH ROW
DECLARE
    v_today DATE := SYSDATE;
    v_expiry DATE;
BEGIN
    SELECT EndDate INTO v_expiry
    FROM Member
    WHERE MemberID = :NEW.MemberID;

    IF v_expiry < v_today THEN
        RAISE_APPLICATION_ERROR(-20000, 'Member''s membership has expired.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20000, 'Member ID not found.');
END;
/