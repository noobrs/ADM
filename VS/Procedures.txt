SET SERVEROUTPUT ON;

-- Procedure 1: proc_renew_membership
-- This procedure renews a member’s membership. If the member is still active (renewal date before current end date), it extends the membership by adding the purchased plan period plus any remaining days; if expired, the new period is set solely from the renewal date. It inserts a renewal record in the MemberRenewal table.
CREATE OR REPLACE PROCEDURE proc_renew_membership (
  p_MemberID    IN Member.MemberID%TYPE,
  p_Duration    IN NUMBER,          -- Duration in years (e.g., 1, 2, or 3)
  p_RenewalFee  IN NUMBER,          -- Renewal fee for the chosen plan
  p_RenewalDate IN DATE             -- Date when the renewal is processed
) IS
  v_oldEndDate    DATE;
  v_memberStatus  VARCHAR2(50);
  v_newStartDate  DATE;
  v_newEndDate    DATE;
BEGIN
  SELECT EndDate, 'Active' 
    INTO v_oldEndDate, v_memberStatus 
    FROM Member
   WHERE MemberID = p_MemberID;
  
  IF p_RenewalDate < v_oldEndDate THEN
    -- Active member: new start date is renewal date; extend by plan period plus remaining days.
    v_newStartDate := p_RenewalDate;
    v_newEndDate   := ADD_MONTHS(p_RenewalDate, p_Duration * 12) + (v_oldEndDate - p_RenewalDate);
  ELSE
    -- Expired member: new period based solely on renewal date and plan duration.
    v_newStartDate := p_RenewalDate;
    v_newEndDate   := ADD_MONTHS(p_RenewalDate, p_Duration * 12);
  END IF;
  
  -- Update member record with new membership period.
  UPDATE Member
     SET StartDate = v_newStartDate,
         EndDate   = v_newEndDate,
         MemberStatus = 'Active'
   WHERE MemberID = p_MemberID;
  
  -- Insert renewal record; generate a Renewal ID dynamically.
  INSERT INTO MemberRenewal 
    (MemberRenewalID, RenewalFee, Duration, RenewalDate, InvoiceID, MemberID)
  VALUES 
    ('MR' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'),
     p_RenewalFee,
     p_Duration,
     p_RenewalDate,
     NULL,  -- Invoice to be generated later
     p_MemberID);
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END proc_renew_membership;
/



-- Procedure 2: proc_process_fine_payment
-- This procedure processes the payment of a fine. Given a FineID, it updates the fine’s status to 'PAID', sets the issue date if necessary, and creates an invoice record for the fine payment.
CREATE OR REPLACE PROCEDURE proc_process_fine_payment (
  p_FineID IN Fine.FineID%TYPE
) IS
  v_fineAmount  NUMBER(8,2);
  v_memberID    Member.MemberID%TYPE;
  v_invoiceID   CHAR(10);
BEGIN
  -- Retrieve the fine amount and associated member from the loan context.
  SELECT f.FineAmount, l.MemberID
    INTO v_fineAmount, v_memberID
  FROM Fine f
  JOIN LoanDetail ld ON f.FineID = ld.FineID
  JOIN Loan l ON ld.LoanID = l.LoanID
  WHERE f.FineID = p_FineID;
  
  -- Update fine to mark it as 'PAID' with current date.
  UPDATE Fine 
     SET FineStatus = 'PAID',
         IssueDate = SYSDATE
   WHERE FineID = p_FineID;
  
  -- Generate a unique invoice ID.
  v_invoiceID := 'INV' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS');
  
  -- Insert the invoice for the fine payment.
  INSERT INTO Invoice 
    (InvoiceID, PaymentDate, PaymentMethod, TotalAmount, MemberID)
  VALUES 
    (v_invoiceID, SYSDATE, 'Fine Payment', v_fineAmount, v_memberID);
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE;
END proc_process_fine_payment;
/

