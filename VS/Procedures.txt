-- Procedure 1
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE prc_loan_books (p_member_id IN CHAR, p_book_list IN VARCHAR) IS
    v_new_loan_id   Loan.LoanID%TYPE;
    v_loan_date     DATE := SYSDATE;
	v_due_date 		DATE;
    v_book_id       Book.BookID%TYPE;
    v_pos           NUMBER := 1;
    v_next_pos      NUMBER;
    v_book_str      VARCHAR(100);
    v_book_copies   Book.AvailableCopies%TYPE;
	v_mem_exp 	    DATE;
   
BEGIN
	SELECT EndDate INTO v_mem_exp
	FROM Member
	WHERE MemberID = p_member_id;
	
	IF v_mem_exp < SYSDATE THEN
		RAISE_APPLICATION_ERROR(-20000, 'Member: ' || p_member_id || ' has expired.');
	END IF;

    DECLARE
        v_temp_str VARCHAR(100) := p_book_list || ',';
        v_count NUMBER := 0;
        v_pos_check NUMBER := 1;
        v_next_pos_check NUMBER;
    BEGIN
        LOOP
            v_next_pos_check := INSTR(v_temp_str, ',', v_pos_check);
            EXIT WHEN v_next_pos_check = 0;
            v_count := v_count + 1;
            v_pos_check := v_next_pos_check + 1;
        END LOOP;

        IF v_count > 5 THEN
            RAISE_APPLICATION_ERROR(-20000, 'A member can only loan up to 5 books at a time.');
        END IF;
    END;

    v_new_loan_id := 'LOA' || TO_CHAR(loan_seq.NEXTVAL, 'FM0000000');

	v_due_date := v_loan_date + 14;

    INSERT INTO Loan (LoanID, LoanDate, DueDate, MemberID)
    VALUES (v_new_loan_id, v_loan_date, v_due_date, p_member_id);

    LOOP
        v_next_pos := INSTR(p_book_list, ',', v_pos);
        IF v_next_pos = 0 THEN
            v_book_str := TRIM(SUBSTR(p_book_list, v_pos));
        ELSE
            v_book_str := TRIM(SUBSTR(p_book_list, v_pos, v_next_pos - v_pos));
        END IF;

        SELECT BookID, AvailableCopies INTO v_book_id, v_book_copies
        FROM Book
        WHERE BookID = v_book_str;

      IF v_book_copies <= 0 THEN
         ROLLBACK;
         RAISE_APPLICATION_ERROR(-20000, 'Book: ' || v_book_id || ' do not have available copies');
      END IF;
      
      INSERT INTO LoanDetail (LoanID, BookID, Status)
      VALUES (v_new_loan_id, v_book_id, 'BORROWED');
      
        EXIT WHEN v_next_pos = 0;
        v_pos := v_next_pos + 1;
    END LOOP;

    COMMIT;
   
    DBMS_OUTPUT.PUT_LINE('Loan created successfully.');
    DBMS_OUTPUT.PUT_LINE('=================================================');
    DBMS_OUTPUT.PUT_LINE('LOAN DETAILS');
    DBMS_OUTPUT.PUT_LINE('=================================================');
    DBMS_OUTPUT.PUT_LINE('Loan ID       : ' || v_new_loan_id);
    DBMS_OUTPUT.PUT_LINE('Member ID     : ' || p_member_id);
    DBMS_OUTPUT.PUT_LINE('Loan Date     : ' || TO_CHAR(v_loan_date, 'DD-MON-YYYY'));
    DBMS_OUTPUT.PUT_LINE('Due Date      : ' || TO_CHAR(v_due_date, 'DD-MON-YYYY'));
    DBMS_OUTPUT.PUT_LINE('-------------------------------------------------');
    DBMS_OUTPUT.PUT_LINE(' Book(s) Borrowed:');
    DBMS_OUTPUT.PUT_LINE('-------------------------------------------------');

    FOR book_rec IN (
        SELECT b.BookID, b.Title
        FROM Book b
        JOIN LoanDetail ld ON b.BookID = ld.BookID
        WHERE ld.LoanID = v_new_loan_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('- ' || book_rec.BookID || ' | ' || book_rec.Title);
    END LOOP;

    DBMS_OUTPUT.PUT_LINE('=================================================');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: BookID(S) not found.');
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Unexpected Error: ' || SQLERRM);
END;
/

-- Positive Test Case
EXEC prc_loan_books('MEM0000011', 'BOK0000001,BOK00000002,BOK0000003');

-- Negative 1: Inactive Member
EXEC prc_loan_books('MEM0000001', 'BOK0000001,BOK00000002,BOK0000003');

-- Negative 2: No available Copies of book
UPDATE Book
SET AvailableCopies = 0
WHERE BookID = 'BOK0000007';
EXEC prc_loan_books('MEM0000011', 'BOK0000007,BOK00000002,BOK0000003');

-- Negative 3: Exceed Number of Books Limit
EXEC prc_loan_books('MEM0000001', 'BOK0000001,BOK00000002,BOK0000003,BOK0000004,BOK00000005,BOK0000006');

-- Negative 4: Invalid BookID
EXEC prc_loan_books('MEM0000001', 'ABC');


-- Procedure 2
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE prc_extend_loan (v_loan_id IN CHAR, v_book_id IN CHAR) IS
    v_current_due_date DATE;
    v_extension_count  NUMBER;
	v_current_status 	LoanDetail.Status%TYPE;
BEGIN
    SELECT ExtensionCount, NVL(ExtendedDueDate, (SELECT DueDate FROM Loan WHERE LoanID = v_loan_id)), Status
    INTO v_extension_count, v_current_due_date, v_current_status
    FROM LoanDetail
    WHERE LoanID = v_loan_id AND BookID = v_book_id;

	IF v_current_status NOT IN ('BORROWED', 'EXTENDED') THEN
		RAISE_APPLICATION_ERROR(-20000, 'Book: ' || v_book_id || ' cannot be extended as it is not currently on loan.');
	END IF;
	
    IF v_extension_count < 3 THEN
        UPDATE LoanDetail
        SET 
            ExtendedDueDate = v_current_due_date + 7,
            ExtensionCount = v_extension_count + 1,
			Status = 'EXTENDED'
        WHERE LoanID = v_loan_id AND BookID = v_book_id;

        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Loan extended successfully. New due date: ' || (v_current_due_date + 7));
    ELSE
        RAISE_APPLICATION_aERROR(-20000, 'Extension limit reached for this book.');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Loan detail not found for the specified Loan ID and Book ID.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/

-- 1. Valid extension (ExtensionCount < 3)
INSERT INTO Loan VALUES ('LOA0000999', SYSDATE, SYSDATE + 14, 'MEM0000011');
INSERT INTO LoanDetail VALUES ('LOA0000999', 'BOK0000001', NULL, 0, NULL, 'BORROWED', NULL);
INSERT INTO LoanDetail VALUES ('LOA0000999', 'BOK0000002', NULL, 0, NULL, 'BORROWED', NULL);
INSERT INTO LoanDetail VALUES ('LOA0000999', 'BOK0000003', NULL, 0, NULL, 'BORROWED', NULL);
INSERT INTO LoanDetail VALUES ('LOA0000999', 'BOK0000004', NULL, 0, NULL, 'BORROWED', NULL);
INSERT INTO LoanDetail VALUES ('LOA0000999', 'BOK0000005', NULL, 0, NULL, 'BORROWED', NULL);

EXEC prc_extend_loan('LOA0000999', 'BOK0000001');


-- 2. Extension limit reached (manually ensure ExtensionCount = 3 for this book before running)
UPDATE LoanDetail
SET ExtensionCount = 3
WHERE LoanID = 'LOA0000999' AND BookID = 'BOK0000002';

EXEC prc_extend_loan('LOA0000999', 'BOK0000002');


-- 3. not in borrowed or extended status
UPDATE LoanDetail
SET Status = 'RETURNED'
WHERE LoanID = 'LOA0000999' AND BookID = 'BOK0000003';

EXEC prc_extend_loan('LOA0000999', 'BOK0000003');


-- 4. Loan detail not found (Invalid Loan ID or Book ID)
EXEC prc_extend_loan('LOA9999999', 'LOA9999999');


-- 5. (Optional) Unexpected error â€” Example: NULL as Loan ID (forces error if your table constraints disallow it)
EXEC prc_extend_loan(NULL, 'BOK0000003');

