DROP TABLE LoanAudit;

CREATE TABLE LoanAudit (
    LoanID        CHAR(10),
	ActionDate    TIMESTAMP,
    ActionType    VARCHAR(10),
	ActionDesc     VARCHAR(200),
    PerformedBy   VARCHAR(100)
);

CREATE OR REPLACE TRIGGER trg_audit_loan_actions
AFTER INSERT OR UPDATE OR DELETE ON Loan
FOR EACH ROW
DECLARE
	v_actionStr 	VARCHAR(200);
BEGIN
    IF INSERTING THEN
	
		v_actionStr := 'Member ID: ' || :NEW.MemberID || 
		', Loan Date: ' || :NEW.LoanDate ||
		', Due Date: ' || :NEW.DueDate;
		
        INSERT INTO LoanAudit (LoanID, ActionDate, ActionType, ActionDesc, PerformedBy) 
		VALUES (:NEW.LoanID, SYSTIMESTAMP, 'INSERT', v_actionStr, USER);

    ELSIF UPDATING THEN
	
        v_actionStr := 'Loan ID: ' :OLD.LoanID || ' -> ' || :NEW.LoanID ||
		'Member ID: ' || :OLD.MemberID || ' -> ' || :NEW.MemberID || 
		', Loan Date: ' || OLD.LoanDate || ' -> ' || :NEW.LoanDate ||
		', Due Date: ' || OLD.DueDate || '->' || :NEW.DueDate;
		
        INSERT INTO LoanAudit (LoanID, ActionDate, ActionType, ActionDesc, PerformedBy) 
		VALUES (:NEW.LoanID, SYSTIMESTAMP, 'UPDATE', v_actionStr, USER);

    ELSIF DELETING THEN
        
		v_actionStr := 'Member ID: ' || :OLD.MemberID || 
		', Loan Date: ' || :OLD.LoanDate ||
		', Due Date: ' || :OLD.DueDate;
		
        INSERT INTO LoanAudit (LoanID, ActionDate, ActionType, ActionDesc, PerformedBy) 
		VALUES (:OLD.LoanID, SYSTIMESTAMP, 'DELETE', v_actionStr, USER);
		
    END IF;
END;
/

UPDATE Loan
SET DueDate = '2025-5-20' WHERE LoanID = 'LOA0000100';


DELETE FROM LoanDetail WHERE LoanID = 'LOA0000100';
DELETE FROM Loan WHERE LoanID = 'LOA0000100';


---------------------------------------------------------------------------------------

DROP TABLE LoanDetailAudit;

CREATE TABLE LoanDetailAudit (
    BookID         CHAR(10),
    LoanID         CHAR(10),
	ActionDate     TIMESTAMP,
    ActionType     VARCHAR(10),
	ActionDesc 	   VARCHAR(200),
    PerformedBy    VARCHAR(100)
);


CREATE OR REPLACE TRIGGER trg_borrowed_count
AFTER INSERT OR UPDATE OR DELETE ON LoanDetail
FOR EACH ROW
DECLARE
	v_actionStr 	VARCHAR(150);
BEGIN
	IF INSERTING THEN
		UPDATE Book
		SET BorrowedCount = NVL(BorrowedCount, 0) + 1,
			AvailableCopies = AvailableCopies - 1
		WHERE BookID = :NEW.BookID;
		
		v_actionStr := 'Return Date: ' || :NEW.ReturnDate || 
		', Extension Count: ' || :NEW.ExtensionCount || 
		', Extended Due Date: ' :NEW.ExtendedDueDate || 
		', Status: ' || :NEW.Status;

		INSERT INTO LoanDetailAudit (BookID, LoanID, ActionDate, ActionType, ActionDesc, PerformedBy)
		VALUES (:NEW.BookID, :NEW.LoanID, SYSTIMESTAMP, 'INSERT', v_actionStr, USER);
		
	ELSIF UPDATING THEN
		
		IF :OLD.BookID != :NEW.BookID THEN
			UPDATE Book
			SET BorrowedCount = NVL(BorrowedCount, 0) - 1,
			AvailableCopies = AvailableCopies + 1
			WHERE BookID = :OLD.BookID;
			
			UPDATE Book
			SET BorrowedCount = NVL(BorrowedCount, 0) + 1,
			AvailableCopies = AvailableCopies - 1
			WHERE BookID = :NEW.BookID;
		END IF;
	
		v_actionStr := 'Book ID: ' || :OLD.BookID || ' -> ' || :NEW.BookID ||
		', Loan ID: ' || :OLD.LoanID || ' -> ' || :NEW.LoanID ||
		'Return Date: ' || :OLD.ReturnDate || ' -> ' || :NEW.ReturnDate || 
		', Extension Count: ' || :OLD.ExtensionCount || ' -> ' || :NEW.ExtensionCount || 
		', Extended Due Date: ' || :OLD.ExtendedDueDate || ' -> ' :NEW.ExtendedDueDate || 
		', Status: ' || :OLD.Status || ' -> ' || :NEW.Status;

		INSERT INTO LoanDetailAudit (BookID, LoanID, ActionDate, ActionType, ActionDesc, PerformedBy)
		VALUES (:NEW.BookID, :NEW.LoanID, SYSTIMESTAMP, 'UPDATE', v_actionStr, USER);
		
	ELSIF DELETING THEN
	
		UPDATE Book
		SET BorrowedCount = NVL(BorrowedCount, 0) - 1,
			AvailableCopies = AvailableCopies + 1
		WHERE BookID = :OLD.BookID;
		
		v_actionStr := 'Return Date: ' || :OLD.ReturnDate || 
		', Extension Count: ' || :OLD.ExtensionCount || 
		', Extended Due Date: ' :OLD.ExtendedDueDate || 
		', Status: ' || :OLD.Status;

		INSERT INTO LoanDetailAudit (BookID, LoanID, ActionDate, ActionType, ActionDesc, PerformedBy)
		VALUES (:OLD.BookID, :OLD.LoanID, SYSTIMESTAMP, 'DELETE', v_actionStr, USER);
	END IF;
END;
/




--------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER trg_check_member_validity
BEFORE INSERT ON Loan
FOR EACH ROW
DECLARE
    v_today DATE := SYSDATE;
    v_expiry DATE;
BEGIN
    SELECT EndDate INTO v_expiry
    FROM Member
    WHERE MemberID = :NEW.MemberID;

    IF v_expiry < v_today THEN
        RAISE_APPLICATION_ERROR(-20000, 'Member''s membership has expired.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20000, 'Member ID not found.');
END;
/


SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER trg_check_member_validity
BEFORE INSERT ON Loan
FOR EACH ROW
DECLARE
    v_today DATE := SYSDATE;
    v_expiry DATE;
BEGIN
    SELECT EndDate INTO v_expiry
    FROM Member
    WHERE MemberID = :NEW.MemberID;

    IF v_expiry < v_today THEN
        RAISE_APPLICATION_ERROR(-20000, 'Member''s membership has expired.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20000, 'Member ID not found.');
END;
/
