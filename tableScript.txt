DROP TABLE ReservationDetail;
DROP TABLE LoanDetail;
DROP TABLE Fine;
DROP TABLE Reservation;
DROP TABLE Loan;
DROP TABLE Booking;
DROP TABLE MemberRenewal;
DROP TABLE Invoice;
DROP TABLE Facility;
DROP TABLE Book;
DROP TABLE Member;

-- Member Table
CREATE TABLE Member (
    MemberID 		CHAR (10)	NOT NULL,
    FirstName 		VARCHAR (20)	NOT NULL,
    LastName 		VARCHAR (30)	NOT NULL,
    DOB 		DATE		NOT NULL,
    PhoneNumber 	VARCHAR (15)	NOT NULL,
    Gender 		CHAR(1)		CHECK (UPPER(Gender) in ('M', 'F')) NOT NULL,
    Email 		VARCHAR (30)	CHECK (REGEXP_LIKE(Email,'^[a-zA-Z]\w+@(\S+)$')) NOT NULL,
    StartDate		DATE		NOT NULL,
    EndDate		DATE		NOT NULL,
    PRIMARY KEY (MemberID)
);

-- Book Table
CREATE TABLE Book (
    BookID 		CHAR (10)	NOT NULL,
    Title 		VARCHAR (255)	NOT NULL,
    Author 		VARCHAR (255)	NOT NULL,
    Isbn 		CHAR (13)	NOT NULL,
    Price 		NUMBER (6,2)	NOT NULL,
    PublicationYear 	NUMBER (4, 0)	NOT NULL,
    Genre 		VARCHAR (50)	NOT NULL,
    TotalCopies 	NUMBER (3, 0)		NOT NULL,
    AvailableCopies 	NUMBER	(3,0)	NOT NULL,
    BorrowedCount 	NUMBER (8,0) 	NOT NULL,
    PRIMARY KEY (BookID)
);

-- Facility Table
CREATE TABLE Facility (
    FacilityID 		CHAR (10) 	NOT NULL,
    Name 		VARCHAR (100) 	NOT NULL,
    Description 	VARCHAR (255) 	NOT NULL,
    Venue 		VARCHAR (100) 	NOT NULL,
    Capacity 		NUMBER (3,0) 	NOT NULL,
    FacilityStatus 	VARCHAR (50) 	CHECK (UPPER(FacilityStatus) IN ('AVAILABLE', 'BOOKED', 'UNDER MAINTENANCE')) NOT NULL,
    PRIMARY KEY (FacilityID)
);

-- Invoice Table
CREATE TABLE Invoice (
    InvoiceID 		CHAR (10) 	NOT NULL,
    PaymentDateTime 	TIMESTAMP 	NOT NULL,
    PaymentMethod 	VARCHAR(50) 	NOT NULL,
    TotalAmount 	NUMBER (8,2) 	NOT NULL,
    MemberID 		CHAR (10) 	NOT NULL,
    PRIMARY KEY (InvoiceID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

-- MemberRenewal Table
CREATE TABLE MemberRenewal (
    MemberRenewalID 	CHAR (10) 	NOT NULL,
    Duration 	 	NUMBER (2,0) 	NOT NULL,
    RenewalFee 		NUMBER (5, 2) 	NOT NULL,
    RenewalDate		DATE 	 	NOT NULL,
    InvoiceID 		CHAR (10) 	UNIQUE NOT NULL,
    MemberID 		CHAR (10) 	NOT NULL,
    PRIMARY KEY (MemberRenewalID),
    FOREIGN KEY (InvoiceID) REFERENCES Invoice(InvoiceID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

-- Booking Table
CREATE TABLE Booking (
    BookingID 		CHAR (10) 	NOT NULL,
    BookingDate 	DATE 	 	NOT NULL,
    StartTime 		TIME 		NOT NULL,
    EndTime 		TIME	 	NOT NULL,
    BookingStatus 	VARCHAR (50)  	CHECK (UPPER(BookingStatus) IN ('PENDING', 'CONFIRMED', 'CANCELLED')) NOT NULL,
    MemberID 		CHAR (10) 	NOT NULL,
    FacilityID 		CHAR (10) 	NOT NULL,
    PRIMARY KEY (BookingID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID),
    FOREIGN KEY (FacilityID) REFERENCES Facility(FacilityID)
);

-- Loan Table
CREATE TABLE Loan (
    LoanID 		CHAR (10) 	NOT NULL,
    LoanDate 		DATE 		NOT NULL,
    DueDate 		DATE 		NOT NULL,
    MemberID 		CHAR (10)	NOT NULL,
    PRIMARY KEY (LoanID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

-- Reservation Table
CREATE TABLE Reservation (
    ReservationID 	CHAR (10) 	NOT NULL,
    ReservationDate 	DATE 		NOT NULL,
    ReservationStatus 	VARCHAR (50) 	CHECK (UPPER(ReservationStatus) IN ('PENDING', 'CONFIRMED', 'CANCELLED')) NOT NULL,
    Remark		VARCHAR (100),
    PickupDate 		DATE,
    MemberID 		CHAR (10) 	NOT NULL,
    PRIMARY KEY (ReservationID),
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

-- Fine Table
CREATE TABLE Fine (
    FineID 		CHAR (10) 	NOT NULL,
    FineAmount 		NUMBER (6,2) 	NOT NULL,
    FineStatus 		VARCHAR (50) 	CHECK (UPPER(FineStatus) IN ('UNPAID', 'PAID')) NOT NULL,
    IssueDate 		DATE 		NULL,
    Remark 		VARCHAR (100),
    InvoiceID 		CHAR (10),
    PRIMARY KEY (FineID),
    FOREIGN KEY (InvoiceID) REFERENCES Invoice(InvoiceID)
);

-- LoanDetail Table
CREATE TABLE LoanDetail (
    LoanID 		CHAR (10) 	NOT NULL,
    BookID 		CHAR (10) 	NOT NULL,
    ReturnDate 		DATE 		NOT NULL,
    ExtensionCount 	NUMBER (1,0) 	DEFAULT 0 CHECK (ExtensionCount >= 0) NOT NULL,
    ExtendedDueDate 	DATE,
    Status 		VARCHAR (50) 	CHECK (UPPER(Status) IN ('BORROWED', 'RETURNED', 'EXTENDED')) NOT NULL,
    FineID		CHAR (10) 	UNIQUE,
    PRIMARY KEY (LoanID, BookID),
    FOREIGN KEY (BookID) REFERENCES Book(BookID),
    FOREIGN KEY (LoanID) REFERENCES Loan(LoanID),
    FOREIGN KEY (FineID) REFERENCES Fine(FineID)
);

-- ReservationDetail Table
CREATE TABLE ReservationDetail (
    ReservationID 	CHAR (10) 	NOT NULL,
    BookID 		CHAR (10) 	NOT NULL,
    AvailableDate	DATE,
    Status 		VARCHAR (50) 	NOT NULL,
    PRIMARY KEY (ReservationID, BookID),
    FOREIGN KEY (BookID) REFERENCES Book(BookID),
    FOREIGN KEY (ReservationID) REFERENCES Reservation(ReservationID)
);


COMMIT;

